import cv2
import argparse
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw
import warnings
import math
from hw5 import *
warnings.filterwarnings('ignore')

parser = argparse.ArgumentParser(description='How to use this code')
parser.add_argument('-p',default='lena.bmp',type=str,help='The path of image') #image path
parser.add_argument('-t',default='all',type=str,help='The type of user want') #which one user would like to get
args = parser.parse_args()

# Get Region
def get_xy(image,width,height,label):
    x_list = []
    for i in range(width):
        for j in range(height):
            if(image[i,j]==label):
                x_list.append( (j,i) )
    return x_list[0],x_list[-1]

# Read Image
def read_img(path):
    img = cv2.imread(path,0)
    width = img.shape[0]
    height = img.shape[1]
    return img,width,height

# Show Image
def show_img(image):
    cv2.imshow('My Image',image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Save Image
def save_image(path_name,image):
    cv2.imwrite(path_name+'.jpg', image)

# Calculate SNR
def cal_snr(image,noise_image,save_path):
    image = image/255
    noise_image = noise_image/255
    width = image.shape[0]
    height = image.shape[1]
    mu = 0
    mu_n = 0
    vs = 0
    vn = 0
    snr = 0

    for i in range(width):
        for j in range(height):
            mu = mu + image[i, j]
    mu = mu / (width * height)

    for i in range(width):
        for j in range(height):
            mu_n = mu_n + (noise_image[i,j] - image[i, j])
    mu_n = mu_n / (width * height)

    for i in range(width):
        for j in range(height):
            vs = vs + math.pow(image[i, j] - mu, 2)
    vs = vs / (width * height)

    for i in range(width):
        for j in range(height):
            vn = vn + math.pow(noise_image[i,j] - image[i, j] - mu_n, 2)
    vn = vn / (width * height)

    snr = 20 * math.log(math.sqrt(vs) / math.sqrt(vn), 10)
    print('The SNR of '+save_path+': {}'.format(snr))

    return snr

# Generate noisy images with gaussian noise 
def add_gaussian_noise_image(amplitude,MEAN,VARIANCE,image,is_write):
    img_result = image.copy()
    gaussian_noise = np.random.normal(MEAN, VARIANCE, img_result.shape)
    img_result = img_result + amplitude * gaussian_noise
    img_result[img_result>255] = 255
    if(is_write):
        cal_snr(image,img_result,'Gaussian Noise '+str(amplitude))
        save_image('gaussian_noise_'+str(amplitude),img_result)
    return img_result

# Generate noisy images with salt-and-pepper noise
def add_salt_and_pepper_noise_image(probability,width,height,image,is_write):
    img_result = image.copy()
    salt_and_pepper_noise = np.random.uniform(0, 1, image.shape)

    for i in range(width):
        for j in range(height):
            if(salt_and_pepper_noise[i, j] <= probability):
                img_result[i, j] = 0
            elif(salt_and_pepper_noise[i, j] >= (1 - probability) ): 
                img_result[i, j] = 255
    if(is_write):
        cal_snr(image,img_result,'Gaussian Salt And Pepper Noise P'+str(probability))
        save_image('salt_and_pepper_noise_P'+str(probability).replace('.','_'),img_result)
    return img_result

# Use the 3x3, 5x5 box filter on images generated by (a)(b)
def box_filter(size,width,height,image,image_origin,name):
    kernel2 = []
    # img_result = np.zeros(image.shape,dtype=np.int)
    img_result = np.zeros(image.shape,dtype=np.int)
    size_d = size * size
    for i in range(-size // 2, size // 2):
        for j in range(-size // 2, size // 2):
            kernel2.append([i, j])
            
    for i in range(width):
        for j in range(height):
            val = 0
            for d in kernel2:
                new_i = d[0]
                new_j = d[1]
                if( (i + new_i >= 0) and (i + new_i < width) and (j + new_j >= 0) and (j + new_j < height) ):
                    val += image[i + new_i, j + new_j]
            img_result[i, j] = int(val / size_d)
    
    cal_snr(image_origin,img_result,str(size)+'Size Box Filter on '+str(name))
    save_image(str(size)+'Size Box Filter on '+str(name),img_result)
    return img_result

# Use 3x3, 5x5 median filter on images generated by (a)(b)
def median_filter(size,width,height,image,image_origin,name):
    kernel = []
    img_result = np.zeros(image.shape,dtype=np.int)
    size_d = size * size
    for i in range(-size // 2, size // 2):
        for j in range(-size // 2, size // 2):
            kernel.append([i, j])
    
    for i in range(width):
        for j in range(height):
            val = []
            for d in kernel:
                new_i = d[0]
                new_j = d[1]
                if( (i + new_i >= 0) and (i + new_i < width) and (j + new_j >= 0) and (j + new_j < height) ):
                    val.append(image[i + new_i, j + new_j])
            img_result[i, j] = np.median(val)
    
    cal_snr(image_origin,img_result,str(size)+'Size Median Filter on '+str(name))
    save_image(str(size)+'Size Median Filter on '+str(name),img_result)
    return img_result


# Main Function
'''
Usage: python3 hw8.py -p lena.bmp
'''
def main():
    kernel = [
         [-2,-1],[-2,0],[-2,1],
 [-1,-2],[-1,-1],[-1,0],[-1,1],[-1,2],
 [0,-2], [0,-1], [0,0], [0,1], [0,2],
 [1,-2], [1,-1], [1,0], [1,1], [1,2],
         [2,-1],[2,0],[2,1],
]

    img,width,height = read_img(args.p)
    if(args.t=='a'):
        img1 = add_gaussian_noise_image(10,0,1,img,True)
        img2 = add_gaussian_noise_image(30,0,1,img,True)
    elif(args.t=='b'):
        img3 = add_salt_and_pepper_noise_image(0.1,width,height,img,True)
        img4 = add_salt_and_pepper_noise_image(0.05,width,height,img,True)
    elif(args.t=='c'):
        img1 = add_gaussian_noise_image(10,0,1,img,False)
        img2 = add_gaussian_noise_image(30,0,1,img,False)
        img3 = add_salt_and_pepper_noise_image(0.1,width,height,img,False)
        img4 = add_salt_and_pepper_noise_image(0.05,width,height,img,False)

        img1_f3 = box_filter(3,width,height,img1,img,'gaussian_noise_10')
        img1_f5 = box_filter(5,width,height,img1,img,'gaussian_noise_10')
        img2_f3 = box_filter(3,width,height,img2,img,'gaussian_noise_30')
        img2_f5 = box_filter(5,width,height,img2,img,'gaussian_noise_30')
        img3_f3 = box_filter(3,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img3_f5 = box_filter(5,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img4_f3 = box_filter(3,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')
        img4_f5 = box_filter(5,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')
    elif(args.t=='d'):
        img1 = add_gaussian_noise_image(10,0,1,img,False)
        img2 = add_gaussian_noise_image(30,0,1,img,False)
        img3 = add_salt_and_pepper_noise_image(0.1,width,height,img,False)
        img4 = add_salt_and_pepper_noise_image(0.05,width,height,img,False)

        img1_f3 = median_filter(3,width,height,img1,img,'gaussian_noise_10')
        img1_f5 = median_filter(5,width,height,img1,img,'gaussian_noise_10')
        img2_f3 = median_filter(3,width,height,img2,img,'gaussian_noise_30')
        img2_f5 = median_filter(5,width,height,img2,img,'gaussian_noise_30')
        img3_f3 = median_filter(3,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img3_f5 = median_filter(5,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img4_f3 = median_filter(3,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')
        img4_f5 = median_filter(5,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')
    elif(args.t=='e'):
        img1 = add_gaussian_noise_image(10,0,1,img,False)
        img2 = add_gaussian_noise_image(30,0,1,img,False)
        img3 = add_salt_and_pepper_noise_image(0.1,width,height,img,False)
        img4 = add_salt_and_pepper_noise_image(0.05,width,height,img,False)

        img1_f_oc = closing_img(opening_img(img1,kernel,width,height),kernel,width,height)
        cal_snr(img,img1_f_oc,'Opening Then Closing Filter on gaussian_noise_10')
        save_image('Opening_Then_Closing_Filter_on_gaussian_noise_10',img1_f_oc)

        img1_f_co = opening_img(closing_img(img1,kernel,width,height),kernel,width,height)
        cal_snr(img,img1_f_co,'Closing Then Opening Filter on gaussian_noise_10')
        save_image('Closing_Then_Opening_Filter_on_gaussian_noise_10',img1_f_co)

        img2_f_oc = closing_img(opening_img(img2,kernel,width,height),kernel,width,height)
        cal_snr(img,img2_f_oc,'Opening Then Closing Filter on gaussian_noise_30')
        save_image('Opening_Then_Closing_Filter_on_gaussian_noise_30',img2_f_oc)

        img2_f_co = opening_img(closing_img(img2,kernel,width,height),kernel,width,height)
        cal_snr(img,img2_f_co,'Closing Then Opening Filter on gaussian_noise_30')
        save_image('Closing_Then_Opening_Filter_on_gaussian_noise_30',img2_f_co)

        img3_f_oc = closing_img(opening_img(img3,kernel,width,height),kernel,width,height)
        cal_snr(img,img3_f_oc,'Opening Then Closing Filter on salt_and_pepper_noise_P1_10-e1')
        save_image('Opening_Then_Closing_Filter_on_salt_and_pepper_noise_P1_10-e1',img3_f_oc)

        img3_f_co = opening_img(closing_img(img3,kernel,width,height),kernel,width,height)
        cal_snr(img,img3_f_co,'Closing Then Opening Filter on salt_and_pepper_noise_P1_10-e1')
        save_image('Closing_Then_Opening_Filter_salt_and_pepper_noise_P1_10-e1',img3_f_co)

        img4_f_oc = closing_img(opening_img(img4,kernel,width,height),kernel,width,height)
        cal_snr(img,img4_f_oc,'Opening Then Closing Filter on salt_and_pepper_noise_P5_10-e2')
        save_image('Opening_Then_Closing_Filter_on_salt_and_pepper_noise_P5_10-e2',img4_f_oc)

        img4_f_co = opening_img(closing_img(img4,kernel,width,height),kernel,width,height)
        cal_snr(img,img4_f_co,'Closing Then Opening Filter on salt_and_pepper_noise_P5_10-e2')
        save_image('Closing_Then_Opening_Filter_salt_and_pepper_noise_P5_10-e2',img4_f_co)

    elif(args.t=='all'):
        img1 = add_gaussian_noise_image(10,0,1,img,True)
        img2 = add_gaussian_noise_image(30,0,1,img,True)
        img3 = add_salt_and_pepper_noise_image(0.1,width,height,img,True)
        img4 = add_salt_and_pepper_noise_image(0.05,width,height,img,True)

        img1_f3 = box_filter(3,width,height,img1,img,'gaussian_noise_10')
        img1_f5 = box_filter(5,width,height,img1,img,'gaussian_noise_10')
        img2_f3 = box_filter(3,width,height,img2,img,'gaussian_noise_30')
        img2_f5 = box_filter(5,width,height,img2,img,'gaussian_noise_30')
        img3_f3 = box_filter(3,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img3_f5 = box_filter(5,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img4_f3 = box_filter(3,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')
        img4_f5 = box_filter(5,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')

        img1_f3 = median_filter(3,width,height,img1,img,'gaussian_noise_10')
        img1_f5 = median_filter(5,width,height,img1,img,'gaussian_noise_10')
        img2_f3 = median_filter(3,width,height,img2,img,'gaussian_noise_30')
        img2_f5 = median_filter(5,width,height,img2,img,'gaussian_noise_30')
        img3_f3 = median_filter(3,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img3_f5 = median_filter(5,width,height,img3,img,'salt_and_pepper_noise_P1_10-e1')
        img4_f3 = median_filter(3,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')
        img4_f5 = median_filter(5,width,height,img4,img,'salt_and_pepper_noise_P5_10-e2')

        img1_f_oc = closing_img(opening_img(img1,kernel,width,height),kernel,width,height)
        cal_snr(img,img1_f_oc,'Opening Then Closing Filter on gaussian_noise_10')
        save_image('Opening_Then_Closing_Filter_on_gaussian_noise_10',img1_f_oc)

        img1_f_co = opening_img(closing_img(img1,kernel,width,height),kernel,width,height)
        cal_snr(img,img1_f_co,'Closing Then Opening Filter on gaussian_noise_10')
        save_image('Closing_Then_Opening_Filter_on_gaussian_noise_10',img1_f_co)

        img2_f_oc = closing_img(opening_img(img2,kernel,width,height),kernel,width,height)
        cal_snr(img,img2_f_oc,'Opening Then Closing Filter on gaussian_noise_30')
        save_image('Opening_Then_Closing_Filter_on_gaussian_noise_30',img2_f_oc)

        img2_f_co = opening_img(closing_img(img2,kernel,width,height),kernel,width,height)
        cal_snr(img,img2_f_co,'Closing Then Opening Filter on gaussian_noise_30')
        save_image('Closing_Then_Opening_Filter_on_gaussian_noise_30',img2_f_co)

        img3_f_oc = closing_img(opening_img(img3,kernel,width,height),kernel,width,height)
        cal_snr(img,img3_f_oc,'Opening Then Closing Filter on salt_and_pepper_noise_P1_10-e1')
        save_image('Opening_Then_Closing_Filter_on_salt_and_pepper_noise_P1_10-e1',img3_f_oc)

        img3_f_co = opening_img(closing_img(img3,kernel,width,height),kernel,width,height)
        cal_snr(img,img3_f_co,'Closing Then Opening Filter on salt_and_pepper_noise_P1_10-e1')
        save_image('Closing_Then_Opening_Filter_salt_and_pepper_noise_P1_10-e1',img3_f_co)

        img4_f_oc = closing_img(opening_img(img4,kernel,width,height),kernel,width,height)
        cal_snr(img,img4_f_oc,'Opening Then Closing Filter on salt_and_pepper_noise_P5_10-e2')
        save_image('Opening_Then_Closing_Filter_on_salt_and_pepper_noise_P5_10-e2',img4_f_oc)

        img4_f_co = opening_img(closing_img(img4,kernel,width,height),kernel,width,height)
        cal_snr(img,img4_f_co,'Closing Then Opening Filter on salt_and_pepper_noise_P5_10-e2')
        save_image('Closing_Then_Opening_Filter_salt_and_pepper_noise_P5_10-e2',img4_f_co)


if __name__ == "__main__":
    main()